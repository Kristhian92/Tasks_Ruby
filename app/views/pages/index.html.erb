<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Earthquake Features</title>
  <link rel="stylesheet" href="styles.css">
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 p-6">
  <div class="App">
    <h1 class="text-2xl font-bold mb-4">Earthquake Features</h1>
    <label for="magTypeFilter" class="block mb-2">Filter by Magnitude Type:</label>
    <select id="magTypeFilter" class="block w-full p-2 border rounded mb-4">
      <option value="">All</option>
      <option value="md">md</option>
      <option value="ml">ml</option>
      <option value="ms">ms</option>
      <option value="mw">mw</option>
      <option value="me">me</option>
      <option value="mi">mi</option>
      <option value="mb">mb</option>
      <option value="mlg">mlg</option>
    </select>
    <ul id="featuresList" class="space-y-4">
    <div id="pagination"></div>
  </div>
  <script>
    document.addEventListener('DOMContentLoaded', async () => {
    const featuresList = document.getElementById('featuresList');
    const magTypeFilter = document.getElementById('magTypeFilter');
    const pagination = document.getElementById('pagination');
    let currentPage = 1;
    let totalPages = 0;
    let perPage = 10;

    fetchData();

    async function fetchData() {
  try {
    const response = await fetch(`http://localhost:3000/api/features?page=${currentPage}&per_page=${perPage}&filters[mag_type]=${magTypeFilter.value}`);
    const data = await response.json();
    
    if (!Array.isArray(data)) {
      console.error('Invalid response format:', data);
      return;
    }

    renderFeatures(data);
    renderPagination();
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}

function renderFeatures(features) {
  featuresList.innerHTML = features.map(feature => `
    <li>
      <p>ID: ${feature.id}</p>
      <p>Title: ${feature.title}</p>
      <p>Magnitude: ${feature.magnitude}</p>
      <p>Place: ${feature.place}</p>
      <p>Time: ${feature.time}</p>
      <p>Tsunami: ${feature.tsunami ? 'Yes' : 'No'}</p>
      <p>Magnitude Type: ${feature.mag_type}</p>
      <p>Coordinates: ${feature.coordinates.longitude}, ${feature.coordinates.latitude}</p>
      ${feature.links ? `<a href="${feature.links.external_url}" target="_blank" rel="noopener noreferrer">More info</a>` : ''}
      <p class="comments-list">Comentarios:</p> <ul id="commentsList"></p>
      <ul id="commentsList" class="mt-4 space-y-2">
      <form id="commentForm" class="comment-form mt-4" data-feature-id="${feature.id}">
        <label for="commentInput" class="block mb-2">Add a comment:</label>
      <input type="text" id="commentInput" name="body" required class="block w-full p-2 border rounded mb-2" />
      <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded">Add Comment</button>
    </form>
    </li>
  `).join('');
}


    function renderPagination() {
        pagination.innerHTML = `
      <button ${currentPage === 1 ? 'disabled' : ''} onclick="prevPage()">Previous Page</button>
      <span>Page ${currentPage} of ${totalPages}</span>
      <button ${currentPage === totalPages ? 'disabled' : ''} onclick="nextPage()">Next Page</button>
    `;
    }

    window.prevPage = () => {
        currentPage--;
        fetchData();
    };

    window.nextPage = () => {
        currentPage++;
        fetchData();
    };

    magTypeFilter.addEventListener('change', () => {
        currentPage = 1;
        fetchData();
    });

    featuresList.addEventListener('submit', async event => {
  event.preventDefault();
  const featureId = event.target.closest('.comment-form').dataset.featureId;
  const body = event.target.elements.body.value;
  try {
    const response = await fetch(`http://localhost:3000/api/features/${featureId}/comments`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ body })
    });
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const data = await response.json();
    console.log('Comment created successfully:', data);

    // Clear the input field
    event.target.elements.body.value = '';

    // Add the new comment to the comments list
    const commentsList = document.querySelector('.comments-list');
    const newComment = document.createElement('div');
    newComment.textContent = data.comment.body;
    commentsList.appendChild(newComment);
  } catch (error) {
    console.error('Error creating comment:', error);
  }
});


});

  </script>
</body>
</html>
<%# <meta name="csrf-token" content="<%= csrf_meta_tags %>